1.) Fizz Buzz
	-Write a program that prints every number from 0 to 100 to the console
		-If a number is divisible by 3, print ‘fizz’ instead of the number
		-If a number is divisible by 5, print ‘buzz’ instead of the number
		-If a number is divisible by 3 and 5, print ‘fizzbuzz’ instead of the number

2.) Reverse a string
	-Write code that takes a string as input and returns the string reversed
		i.e. “Hello” will be returned as “olleH”

3.) Capitalize letter
	-Write code that takes a string as input and capitalize the first letter of each word.
	-Words will be separated by only one space.
		i.e. “hello world” should be outputted as “Hello World”

4.) Compress a string of characters
	-For example, an input of "aaabbbbbccccaacccbbbaaabbbaaa" would compress to "3a5b4c2a3c3b3a3b3a"

5.) Palindrome (a word, phrase, or sequence that reads the same backward as forward i.e. madam)
	-Write code that takes a user input and checks to see if it is a Palindrome and reports the result

6.) Happy Numbers (a happy number is a number defined by the following process: starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1. An example of a happy number is 19)
	-Write code that checks whether a number is a happy number

https://en.wikipedia.org/wiki/Happy_number
7.) Prime Numbers (a prime number is a number that is only divisible by one and itself)
	-Write a function that prints out all prime numbers between 1 and 100 

8.) Fibonacci (a series of numbers in which each number is the sum of the two preceding numbers. The simplest is the series 1, 1, 2, 3, 5, 8, etc.)

	-Write a method that does the Fibonacci sequence starting at 1
	-HARDER VERSION: Write a function that does the Fibonacci sequence starting at a number that a user inputs

9.) Given an array of integers, return indices of the two numbers such that they add up to a specific target. You may assume that each input would have exactly one solution, and you may not use the same element twice.
	-Use Case:
	-Given numbers in an array: [5, 17, 77, 50] 
	-Target: 55

10.) Given a list of integers, return a bool that represents whether or not all integers in the list can form a sequence of incrementing integers
	-Use case: 
	-{5, 7, 3, 8, 6} = false (no 4 to complete the sequence)
	-{17, 15, 20, 19, 21, 16, 18} = true

11.) Create a method that takes an array of positive and negative numbers. Return an array where the first element is the count of the positive numbers and the second element is the sum of negative numbers. 
	-Use case: [7, 9, -3, -32, 107, -1, 36, 95, -14, -99, 21]

12.) Create a method that accepts a string of space separated numbers and returns the highest and lowest number as a string
	-Use case: “3 9 0 1 4 8 10 2”  “0 10”

13.) Create a method that accepts a string, check if it’s a valid email address and returns either true or false depending on the valuation. Think about what is necessary to have a valid email address.
	-Use case:
	-“mike1@gmail.com”  true
	-“gmail.com”  false
14.) Create a method that takes in a string and replaces each letter with its appropriate position in the alphabet and returns the string
	-Use case:
	-“abc” = “1 2 3”
	-“coding is fun” = “3 15 4 9 14 7 9 19 6 21 14”

15.) A briefcase has a four-digit rolling-lock. Each digit is a number from 0-9 that can be rolled either forwards or backwards. Write a method that returns the smallest number of turns it takes to transform the lock from current combination to the target combination. One turn is equivalent to rolling a number forwards or backwards by one. 
	-Use case: 
	-Current lock: 3893
	-Target lock: 5296

16.) Given a number, return the reciprocal of the reverse of the original number, as a double. 
	-Use case: If given 17, return 0.01408 (1/71)
